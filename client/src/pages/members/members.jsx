import React, { useState, useEffect } from 'react';
import {
  Box, Button, TextField, Typography, Paper, Table, TableBody, TableCell,
  TableContainer, TableHead, TableRow, Dialog, DialogTitle, DialogContent,
  DialogActions, MenuItem, Grid, FormControl, InputLabel, Select
} from '@mui/material';
import Navbar from '../../components/Navbar';

const MembersPage = () => {
  const [members, setMembers] = useState([]);
  const [filteredMembers, setFilteredMembers] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    ageBracket: '',
    program: '',
    branch: '',
    endorsedBy: ''
  });
  const [branches, setBranches] = useState([]);
  const [loading, setLoading] = useState(true);
  const [open, setOpen] = useState(false);
  const [editing, setEditing] = useState(false);
  const [previewUrl, setPreviewUrl] = useState('');
  
  // Handle picture upload
  const handlePictureChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrl(reader.result);
      };
      reader.readAsDataURL(file);
      handleChange(e);
    }
  };
  
  // Program data
  const programData = {
    JACINTH: {
      name: 'JACINTH',
      ageBrackets: [
        { range: '18 - 25', amount: 55, availment: '3 mons & 1 day' },
        { range: '26 - 30', amount: 75, availment: '4 mons & 1 day' },
        { range: '31 - 35', amount: 97, availment: '5 mons & 1 day' },
        { range: '36 - 40', amount: 115, availment: '6 mons & 1 day' },
        { range: '41 - 45', amount: 120, availment: '7 mons & 1 day' },
        { range: '46 - 50', amount: 135, availment: '8 mons & 1 day' },
        { range: '51 - 55', amount: 145, availment: '9 mons & 1 day' },
        { range: '56 - 60', amount: 160, availment: '10 mons & 1 day' },
        { range: '61 - 65', amount: 185, availment: '12 mons & 1 day' },
        { range: '66 - 70', amount: 195, availment: '14 mons & 1 day' },
        { range: '71 - 75', amount: 210, availment: '16 mons & 1 day' },
        { range: '76 - 80', amount: 235, availment: '18 mons & 1 day' },
        { range: '81 - 85', amount: 260, availment: '24 mons & 1 day' },
        { range: '86 - 90', amount: 285, availment: '24 mons & 1 day' },
        { range: '91 - 95', amount: 350, availment: '24 mons & 1 day' },
        { range: '96 - 101 UP', amount: 395, availment: '24 mons & 1 day' }
      ]
    },
    CHALCEDONY: {
      name: 'CHALCEDONY',
      ageBrackets: [
        { range: '18 - 25', amount: 80, availment: '3 mons & 1 day' },
        { range: '26 - 30', amount: 105, availment: '4 mons & 1 day' },
        { range: '31 - 35', amount: 130, availment: '5 mons & 1 day' },
        { range: '36 - 40', amount: 145, availment: '6 mons & 1 day' },
        { range: '41 - 45', amount: 150, availment: '7 mons & 1 day' },
        { range: '46 - 50', amount: 165, availment: '8 mons & 1 day' },
        { range: '51 - 55', amount: 180, availment: '9 mons & 1 day' },
        { range: '56 - 60', amount: 195, availment: '10 mons & 1 day' },
        { range: '61 - 65', amount: 225, availment: '12 mons & 1 day' },
        { range: '66 - 70', amount: 240, availment: '14 mons & 1 day' },
        { range: '71 - 75', amount: 265, availment: '16 mons & 1 day' },
        { range: '76 - 80', amount: 290, availment: '18 mons & 1 day' },
        { range: '81 - 85', amount: 325, availment: '24 mons & 1 day' },
        { range: '86 - 90', amount: 360, availment: '24 mons & 1 day' },
        { range: '91 - 95', amount: 415, availment: '24 mons & 1 day' },
        { range: '96 - 101 UP', amount: 450, availment: '24 mons & 1 day' }
      ]
    }
  };

  const programOptions = ['JACINTH', 'CHALCEDONY'];
  const endorsedByOptions = ['Staff 1', 'Staff 2', 'Staff 3', 'Other'];
  
  // Get age brackets for the selected program
  const getAgeBrackets = () => {
    if (!currentMember.program || !programData[currentMember.program]) return [];
    return programData[currentMember.program].ageBrackets;
  };
  
  // Handle program change
  const handleProgramChange = (e) => {
    const selectedProgram = e.target.value;
    setCurrentMember({
      ...currentMember,
      program: selectedProgram,
      ageBracket: '',
      contributionAmount: '',
      availmentPeriod: ''
    });
  };

  const [currentMember, setCurrentMember] = useState({
    // Member Information
    application_number: '', // Will be auto-generated by backend
    full_name: '',
    nickname: '',
    age: '',
    program: '',
    age_bracket: '',
    contribution_amount: '',
    availment_period: '',
    picture: null,
    date_applied: '',
    complete_address: '',
    provincial_address: '',
    date_of_birth: '',
    place_of_birth: '',
    sex: '',
    civil_status: '',
    spouse_name: '',
    spouse_dob: '',
    church_affiliation: '',
    education_attainment: '',
    present_employment: '',
    employer_name: '',
    contact_number: '',
    
    // Beneficiary Information
    beneficiary_name: '',
    beneficiary_dob: '',
    beneficiary_age: '',
    beneficiary_relationship: '',
    
    // Staff Information (to be filled by staff)
    date_paid: '',
    received_by: '',
    or_number: '',
    endorsed_by: '',
    branch: ''
  });

  // Fetch branches from API
  useEffect(() => {
    const fetchBranches = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch('http://localhost:5000/api/branches', {
          headers: {
            'x-auth-token': token,
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error('Failed to fetch branches');
        }
        
        const data = await response.json();
        setBranches(data);
      } catch (error) {
        console.error('Error fetching branches:', error);
        // Fallback to sample data if API call fails
        setBranches([
          { id: 1, name: 'Ozamiz', isActive: true },
          { id: 2, name: 'Opol', isActive: true },
          { id: 3, name: 'Carmen (CDO)', isActive: true },
          { id: 4, name: 'Gingoog', isActive: true },
          { id: 5, name: 'Claveria', isActive: true },
          { id: 6, name: 'Molave', isActive: true },
          { id: 7, name: 'Jimenez', isActive: true }
        ]);
      }
    };

    fetchBranches();
  }, []);

  // Filter members based on search term and filters
  useEffect(() => {
    let result = [...members];
    
    // Apply search term filter
    if (searchTerm) {
      const lowercasedFilter = searchTerm.toLowerCase();
      result = result.filter(member => {
        return (
          (member.full_name && member.full_name.toLowerCase().includes(lowercasedFilter)) ||
          (member.program && member.program.toLowerCase().includes(lowercasedFilter)) ||
          (member.branch && member.branch.toLowerCase().includes(lowercasedFilter))
        );
      });
    }
    
    // Apply dropdown filters
    Object.entries(filters).forEach(([key, value]) => {
      if (value) {
        result = result.filter(member => {
          // Handle age bracket filter specially
          if (key === 'ageBracket') {
            const bracket = getAgeBrackets().find(b => b.range === value);
            if (!bracket) return true;
            const age = parseInt(member.age || '0');
            return age >= bracket.minAge && age <= bracket.maxAge;
          }
          return member[key] === value || 
                 (key === 'endorsedBy' && member.endorsed_by === value);
        });
      }
    });
    
    setFilteredMembers(result);
  }, [searchTerm, members, filters]);
  
  const handleFilterChange = (filterName, value) => {
    setFilters(prev => ({
      ...prev,
      [filterName]: value
    }));
  };
  
  const clearFilters = () => {
    setFilters({
      ageBracket: '',
      program: '',
      branch: '',
      endorsedBy: ''
    });
    setSearchTerm('');
  };

  // Fetch members from API
  useEffect(() => {
    const fetchMembers = async () => {
      try {
        setLoading(true);
        const token = localStorage.getItem('token');
        const response = await fetch('http://localhost:5000/api/members', {
          headers: {
            'x-auth-token': token,
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error('Failed to fetch members');
        }
        
        const data = await response.json();
        setMembers(data);
        setFilteredMembers(data);
      } catch (error) {
        console.error('Error fetching members:', error);
        // Optionally show error to user
      } finally {
        setLoading(false);
      }
    };

    fetchMembers();
  }, []);

  const handleOpen = () => setOpen(true);
  const handleClose = () => {
    setOpen(false);
    setEditing(false);
    setPreviewUrl('');
    setCurrentMember({
      application_number: '',
      full_name: '',
      nickname: '',
      age: '',
      program: '',
      age_bracket: '',
      contribution_amount: '',
      availment_period: '',
      picture: null,
      date_applied: '',
      complete_address: '',
      provincial_address: '',
      date_of_birth: '',
      place_of_birth: '',
      sex: '',
      civil_status: '',
      spouse_name: '',
      spouse_dob: '',
      church_affiliation: '',
      education_attainment: '',
      present_employment: '',
      employer_name: '',
      contact_number: '',
      beneficiary_name: '',
      beneficiary_dob: '',
      beneficiary_age: '',
      beneficiary_relationship: '',
      date_paid: '',
      received_by: '',
      or_number: '',
      endorsed_by: '',
      branch: ''
    });
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCurrentMember(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      
      // Format dates to YYYY-MM-DD format for the API
      const formattedMember = {
        ...currentMember,
        date_applied: currentMember.date_applied || new Date().toISOString().split('T')[0],
        date_of_birth: currentMember.date_of_birth || null,
        spouse_dob: currentMember.spouse_dob || null,
        beneficiary_dob: currentMember.beneficiary_dob || null,
        date_paid: currentMember.date_paid || null,
        age: currentMember.age ? parseInt(currentMember.age) : null,
        beneficiary_age: currentMember.beneficiary_age ? parseInt(currentMember.beneficiary_age) : null,
        contribution_amount: currentMember.contribution_amount ? parseFloat(currentMember.contribution_amount) : null
      };
      
      const response = await fetch('http://localhost:5000/api/members', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-auth-token': token
        },
        body: JSON.stringify(formattedMember)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to save member');
      }
      
      const savedMember = await response.json();
      
      // Update the UI with the saved member (including the server-generated fields)
      if (editing) {
        setMembers(members.map(m => 
          m.id === savedMember.id ? savedMember : m
        ));
      } else {
        setMembers([savedMember, ...members]);
      }
      
      // Show success message
      alert(`Member ${editing ? 'updated' : 'added'} successfully!`);
      handleClose();
      
    } catch (error) {
      console.error('Error saving member:', error);
      alert(error.message || 'Failed to save member. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (member) => {
    setCurrentMember(member);
    setEditing(true);
    setOpen(true);
  };

  const handleDelete = (applicationNumber) => {
    // TODO: Add confirmation dialog
    setMembers(members.filter(m => m.applicationNumber !== applicationNumber));
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navbar activePage="members" />
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-green-500"></div>
        </div>
      </div>
    );
  }

  // Unique values for filters
  const uniquePrograms = [...new Set(members.map(member => member.program))].filter(Boolean);
  const uniqueBranches = [...new Set(members.map(member => member.branch))].filter(Boolean);
  const uniqueEndorsedBy = [...new Set(members.map(member => member.endorsed_by))].filter(Boolean);
  const ageBrackets = getAgeBrackets().map(bracket => bracket.range);

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar activePage="members" />
      <div className="py-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="mb-8">
            <h1 className="text-2xl font-bold text-gray-900">Members Management</h1>
            <p className="mt-1 text-sm text-gray-500">Add and manage members</p>
          </div>
          
          <div className="grid grid-cols-1 gap-8">
            <div className="bg-white shadow rounded-lg overflow-hidden">
              <div className="px-6 py-5 border-b border-gray-200">
                <div className="flex justify-between items-center">
                  <h2 className="text-lg font-medium text-gray-900">Members List</h2>
                  <button
                    onClick={handleOpen}
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  >
                    + Add Member
                  </button>
                </div>
              </div>
              <div className="p-6">
                <div className="mb-4 space-y-4">
                  {/* Search Bar */}
                  <div className="relative rounded-md shadow-sm">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <svg className="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <input
                      type="text"
                      className="focus:ring-green-500 focus:border-green-500 block w-full pl-10 pr-12 sm:text-sm border-gray-300 rounded-md p-2 border"
                      placeholder="Search by name, program, or branch"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                    />
                    {(searchTerm || Object.values(filters).some(Boolean)) && (
                      <div className="absolute inset-y-0 right-0 flex items-center pr-2 space-x-1">
                        {searchTerm && (
                          <button
                            onClick={() => setSearchTerm('')}
                            className="text-gray-400 hover:text-gray-600"
                            title="Clear search"
                          >
                            <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        )}
                        {Object.values(filters).some(Boolean) && (
                          <button
                            onClick={clearFilters}
                            className="text-gray-400 hover:text-gray-600 text-xs"
                            title="Clear all filters"
                          >
                            Clear Filters
                          </button>
                        )}
                      </div>
                    )}
                  </div>
                  
                  {/* Filter Dropdowns */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                    {/* Age Bracket Filter */}
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Age Bracket</label>
                      <select
                        className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm p-2 border"
                        value={filters.ageBracket}
                        onChange={(e) => handleFilterChange('ageBracket', e.target.value)}
                      >
                        <option value="">All Age Brackets</option>
                        {ageBrackets.map((bracket) => (
                          <option key={bracket} value={bracket}>
                            {bracket} years
                          </option>
                        ))}
                      </select>
                    </div>
                    
                    {/* Program Filter */}
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Program</label>
                      <select
                        className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm p-2 border"
                        value={filters.program}
                        onChange={(e) => handleFilterChange('program', e.target.value)}
                      >
                        <option value="">All Programs</option>
                        {uniquePrograms.map((program) => (
                          <option key={program} value={program}>
                            {program}
                          </option>
                        ))}
                      </select>
                    </div>
                    
                    {/* Branch Filter */}
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Branch</label>
                      <select
                        className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm p-2 border"
                        value={filters.branch}
                        onChange={(e) => handleFilterChange('branch', e.target.value)}
                      >
                        <option value="">All Branches</option>
                        {uniqueBranches.map((branch) => (
                          <option key={branch} value={branch}>
                            {branch}
                          </option>
                        ))}
                      </select>
                    </div>
                    
                    {/* Endorsed By Filter */}
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Endorsed By</label>
                      <select
                        className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm p-2 border"
                        value={filters.endorsedBy}
                        onChange={(e) => handleFilterChange('endorsedBy', e.target.value)}
                      >
                        <option value="">All Field Workers</option>
                        {uniqueEndorsedBy.map((endorser) => (
                          <option key={endorser} value={endorser}>
                            {endorser}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                </div>
                <div className="relative overflow-x-auto w-full">
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <colgroup>
                        <col className="w-1/6" />
                        <col className="w-1/6" />
                        <col className="w-1/6" />
                        <col className="w-1/6" />
                        <col className="w-1/6" />
                        <col className="w-1/6" />
                        <col className="w-1/6" />
                        <col className="w-1/6" />
                      </colgroup>
                      <thead className="bg-gray-50">
                        <tr>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Name
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Contact
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Date Applied
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Program
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Endorsed By
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Branch
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Last Contribution Date
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Next Due Date
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {loading ? (
                          <tr>
                            <td colSpan="8" className="px-6 py-4 text-center text-sm text-gray-500">
                              Loading members...
                            </td>
                          </tr>
                        ) : filteredMembers.length === 0 ? (
                          <tr>
                            <td colSpan="8" className="px-6 py-4 text-center text-sm text-gray-500">
                              {searchTerm || Object.values(filters).some(Boolean) 
                                ? 'No members match your search criteria. Try different filters.' 
                                : 'No members found. Click "Add Member" to create one.'}
                            </td>
                          </tr>
                        ) : (
                          filteredMembers.map((member) => (
                            <tr key={member.id} className="group hover:bg-gray-50 w-full">
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 group-hover:bg-gray-50">
                                {member.full_name || 'N/A'}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {member.contact_number || 'N/A'}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {member.date_applied ? new Date(member.date_applied).toLocaleDateString() : 'N/A'}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {member.program || 'N/A'}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {member.endorsed_by || 'N/A'}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {member.branch || 'N/A'}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {member.last_contribution_date ? new Date(member.last_contribution_date).toLocaleDateString() : 'N/A'}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {member.next_due_date ? new Date(member.next_due_date).toLocaleDateString() : 'N/A'}
                              </td>
                            </tr>
                          ))
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Add/Edit Member Dialog */}
      <Dialog 
        open={open} 
        onClose={handleClose} 
        maxWidth="md" 
        fullWidth
        className="relative z-50"
        aria-labelledby="member-dialog-title"
      >
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <div className="fixed inset-0 z-10 w-screen overflow-y-auto">
          <div className="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <div className="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl sm:p-6">
              <div>
                <div className="mt-3 text-center sm:mt-0 sm:text-left">
                  <h3 className="text-base font-semibold leading-6 text-gray-900" id="member-dialog-title">
                    {editing ? 'Edit Member' : 'Add New Member'}
                  </h3>
                  <div className="mt-2">
                    <form onSubmit={handleSubmit}>
                      <div className="space-y-6">
                        <div className="border-b border-gray-200 pb-4 mb-4">
                          <div className="flex items-center space-x-6">
                            <div className="shrink-0">
                              {previewUrl ? (
                                <img
                                  className="h-24 w-24 object-cover rounded-full border-2 border-gray-300"
                                  src={previewUrl}
                                  alt="Member preview"
                                />
                              ) : (
                                <div className="h-24 w-24 rounded-full bg-gray-200 flex items-center justify-center text-gray-500">
                                  <span className="text-sm">No photo</span>
                                </div>
                              )}
                            </div>
                            <div className="flex-1">
                              <label className="block">
                                <span className="sr-only">Choose profile photo</span>
                                <input
                                  type="file"
                                  name="picture"
                                  onChange={handlePictureChange}
                                  accept="image/*"
                                  className="block w-full text-sm text-gray-500
                                    file:mr-4 file:py-2 file:px-4
                                    file:rounded-md file:border-0
                                    file:text-sm file:font-semibold
                                    file:bg-green-50 file:text-green-700
                                    hover:file:bg-green-100"
                                />
                              </label>
                              <p className="mt-1 text-xs text-gray-500">JPG, GIF or PNG. Max size 2MB</p>
                            </div>
                          </div>
                        </div>
                        
                        <div>
                          <h4 className="text-sm font-medium text-gray-900 mb-4">Personal Information</h4>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Full Name *
                              </label>
                              <input
                                type="text"
                                name="fullName"
                                value={currentMember.fullName}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                                required
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Nickname
                              </label>
                              <input
                                type="text"
                                name="nickname"
                                value={currentMember.nickname}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Age *
                              </label>
                              <input
                                type="number"
                                name="age"
                                value={currentMember.age}
                                onChange={handleChange}
                                min="0"
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                                required
                              />
                            </div>

                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Contact Number
                              </label>
                              <input
                                type="tel"
                                name="contact_number"
                                value={currentMember.contact_number}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                                required
                              />
                            </div>

                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Branch *
                              </label>
                              <FormControl fullWidth size="small" required>
                                <Select
                                  name="branch"
                                  value={currentMember.branch || ''}
                                  onChange={handleChange}
                                  displayEmpty
                                  inputProps={{ 'aria-label': 'Select Branch' }}
                                  sx={{
                                    '& .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#d1d5db',
                                    },
                                    '&:hover .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#10b981',
                                    },
                                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#10b981',
                                      borderWidth: '2px',
                                    },
                                    '& .MuiSelect-icon': {
                                      color: '#6b7280',
                                    },
                                    backgroundColor: 'white',
                                    borderRadius: '0.375rem',
                                    fontSize: '0.875rem',
                                  }}
                                >
                                  <MenuItem value="" disabled>
                                    <em>Select Branch...</em>
                                  </MenuItem>
                                  {branches.map((branch) => (
                                    <MenuItem 
                                      key={branch.id} 
                                      value={branch.name}
                                      disabled={!branch.isActive}
                                    >
                                      {branch.name}
                                    </MenuItem>
                                  ))}
                                </Select>
                              </FormControl>
                            </div>
                            
                            {/* Program Selection */}
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Program *
                              </label>
                              <FormControl fullWidth size="small" required>
                                <Select
                                  name="program"
                                  value={currentMember.program}
                                  onChange={handleProgramChange}
                                  displayEmpty
                                  inputProps={{ 'aria-label': 'Select Program' }}
                                  sx={{
                                    '& .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#d1d5db',
                                    },
                                    '&:hover .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#10b981',
                                    },
                                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#10b981',
                                      borderWidth: '2px',
                                    },
                                    '& .MuiSelect-icon': {
                                      color: '#6b7280',
                                    },
                                    backgroundColor: 'white',
                                    borderRadius: '0.375rem',
                                    fontSize: '0.875rem',
                                  }}
                                >
                                  <MenuItem value="">
                                    <em>Select Program...</em>
                                  </MenuItem>
                                  {programOptions.map((option) => (
                                    <MenuItem key={option} value={option}>
                                      {option}
                                    </MenuItem>
                                  ))}
                                </Select>
                              </FormControl>
                            </div>
                            
                            {/* Age Bracket Dropdown - Only shown when a program is selected */}
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Age Bracket *
                              </label>
                              <FormControl fullWidth size="small" required disabled={!currentMember.program}>
                                <Select
                                  name="age_bracket"
                                  value={currentMember.age_bracket}
                                  onChange={(e) => {
                                    const selectedBracket = e.target.value;
                                    const selectedData = getAgeBrackets().find(bracket => bracket.range === selectedBracket);
                                    setCurrentMember({
                                      ...currentMember,
                                      age_bracket: selectedBracket,
                                      contribution_amount: selectedData ? selectedData.amount : '',
                                      availment_period: selectedData ? selectedData.availment : ''
                                    });
                                  }}
                                  displayEmpty
                                  inputProps={{ 'aria-label': 'Select Age Bracket' }}
                                  sx={{
                                    '& .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#d1d5db',
                                    },
                                    '&:hover .MuiOutlinedInput-notchedOutline': {
                                      borderColor: currentMember.program ? '#10b981' : '#d1d5db',
                                    },
                                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                                      borderColor: currentMember.program ? '#10b981' : '#d1d5db',
                                      borderWidth: '2px',
                                    },
                                    '& .MuiSelect-icon': {
                                      color: '#6b7280',
                                    },
                                    backgroundColor: currentMember.program ? 'white' : '#f9fafb',
                                    color: !currentMember.program ? '#9ca3af' : 'inherit',
                                    borderRadius: '0.375rem',
                                    fontSize: '0.875rem',
                                  }}
                                >
                                  <MenuItem value="">
                                    <em>Select Age Bracket...</em>
                                  </MenuItem>
                                  {getAgeBrackets().map((bracket, index) => (
                                    <MenuItem key={index} value={bracket.range}>
                                      {bracket.range} years
                                    </MenuItem>
                                  ))}
                                </Select>
                              </FormControl>
                            </div>
                            
                            {/* Contribution Amount - Readonly */}
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Contribution Amount (Php)
                              </label>
                              <input
                                type="text"
                                name="contribution_amount"
                                value={currentMember.contribution_amount ? `${currentMember.contribution_amount} PHP` : ''}
                                readOnly
                                className="block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm sm:text-sm px-2 py-2"
                              />
                            </div>
                            
                            {/* Availment Period - Readonly */}
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Availment Period
                              </label>
                              <input
                                type="text"
                                name="availment_period"
                                value={currentMember.availment_period || ''}
                                readOnly
                                className="block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Date Applied *
                              </label>
                              <input
                                type="date"
                                name="date_applied"
                                value={currentMember.date_applied}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                                required
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Complete Address
                              </label>
                              <textarea
                                name="complete_address"
                                value={currentMember.complete_address}
                                onChange={handleChange}
                                rows={2}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                                required
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Provincial Address
                              </label>
                              <textarea
                                name="provincial_address"
                                value={currentMember.provincial_address}
                                onChange={handleChange}
                                rows={2}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Date of Birth
                              </label>
                              <input
                                type="date"
                                name="date_of_birth"
                                value={currentMember.date_of_birth}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                                required
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Place of Birth
                              </label>
                              <input
                                type="text"
                                name="place_of_birth"
                                value={currentMember.place_of_birth}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                                required
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Sex
                              </label>
                              <FormControl fullWidth size="small" required>
                                <Select
                                  name="sex"
                                  value={currentMember.sex}
                                  onChange={handleChange}
                                  displayEmpty
                                  inputProps={{ 'aria-label': 'Select Sex' }}
                                  sx={{
                                    '& .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#d1d5db',
                                    },
                                    '&:hover .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#10b981',
                                    },
                                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#10b981',
                                      borderWidth: '2px',
                                    },
                                    '& .MuiSelect-icon': {
                                      color: '#6b7280',
                                    },
                                    backgroundColor: 'white',
                                    borderRadius: '0.375rem',
                                    fontSize: '0.875rem',
                                  }}
                                >
                                  <MenuItem value="">
                                    <em>Select...</em>
                                  </MenuItem>
                                  <MenuItem value="Male">Male</MenuItem>
                                  <MenuItem value="Female">Female</MenuItem>
                                </Select>
                              </FormControl>
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Civil Status
                              </label>
                              <FormControl fullWidth size="small" required>
                                <Select
                                  name="civil_status"
                                  value={currentMember.civil_status}
                                  onChange={handleChange}
                                  displayEmpty
                                  inputProps={{ 'aria-label': 'Select Civil Status' }}
                                  sx={{
                                    '& .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#d1d5db',
                                    },
                                    '&:hover .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#10b981',
                                    },
                                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#10b981',
                                      borderWidth: '2px',
                                    },
                                    '& .MuiSelect-icon': {
                                      color: '#6b7280',
                                    },
                                    backgroundColor: 'white',
                                    borderRadius: '0.375rem',
                                    fontSize: '0.875rem',
                                  }}
                                >
                                  <MenuItem value="">
                                    <em>Select...</em>
                                  </MenuItem>
                                  <MenuItem value="Single">Single</MenuItem>
                                  <MenuItem value="Married">Married</MenuItem>
                                  <MenuItem value="Widowed">Widowed</MenuItem>
                                  <MenuItem value="Separated">Separated</MenuItem>
                                  <MenuItem value="Divorced">Divorced</MenuItem>
                                </Select>
                              </FormControl>
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Name of Spouse (Optional)
                              </label>
                              <input
                                type="text"
                                name="spouse_name"
                                value={currentMember.spouse_name || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Spouse Date of Birth
                              </label>
                              <input
                                type="date"
                                name="spouse_dob"
                                value={currentMember.spouse_dob || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Church Affiliation
                              </label>
                              <input
                                type="text"
                                name="church_affiliation"
                                value={currentMember.church_affiliation || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Education Attainment
                              </label>
                              <input
                                type="text"
                                name="education_attainment"
                                value={currentMember.education_attainment || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Present Employment
                              </label>
                              <input
                                type="text"
                                name="present_employment"
                                value={currentMember.present_employment || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Name of Employer
                              </label>
                              <input
                                type="text"
                                name="employer_name"
                                value={currentMember.employer_name || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                          </div>
                        </div>

                        <div>
                          <h4 className="text-sm font-medium text-gray-900 mb-4">Beneficiary Information</h4>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Beneficiary Name
                              </label>
                              <input
                                type="text"
                                name="beneficiary_name"
                                value={currentMember.beneficiary_name || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Beneficiary Date of Birth
                              </label>
                              <input
                                type="date"
                                name="beneficiary_dob"
                                value={currentMember.beneficiary_dob || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Beneficiary Age
                              </label>
                              <input
                                type="number"
                                name="beneficiary_age"
                                value={currentMember.beneficiary_age || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Relationship to Member
                              </label>
                              <input
                                type="text"
                                name="beneficiary_relationship"
                                value={currentMember.beneficiary_relationship || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                          </div>
                        </div>

                        <div>
                          <h4 className="text-sm font-medium text-gray-900 mb-4">Staff Information</h4>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Date Paid
                              </label>
                              <input
                                type="date"
                                name="date_paid"
                                value={currentMember.date_paid || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Received By
                              </label>
                              <input
                                type="text"
                                name="received_by"
                                value={currentMember.received_by || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                O.R. Number
                              </label>
                              <input
                                type="text"
                                name="or_number"
                                value={currentMember.or_number || ''}
                                onChange={handleChange}
                                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm px-2 py-2"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                Endorsed By (Field Worker)
                              </label>
                              <FormControl fullWidth size="small">
                                <Select
                                  name="endorsed_by"
                                  value={currentMember.endorsed_by || ''}
                                  onChange={handleChange}
                                  displayEmpty
                                  inputProps={{ 'aria-label': 'Select Staff' }}
                                  sx={{
                                    '& .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#d1d5db',
                                    },
                                    '&:hover .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#10b981',
                                    },
                                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                                      borderColor: '#10b981',
                                      borderWidth: '1px',
                                    },
                                    '& .MuiSelect-icon': {
                                      color: '#6b7280',
                                    },
                                    backgroundColor: 'white',
                                    borderRadius: '0.375rem',
                                    fontSize: '0.875rem',
                                  }}
                                >
                                  <MenuItem value="">
                                    <em>Select staff</em>
                                  </MenuItem>
                                  {endorsedByOptions.map((option, index) => (
                                    <MenuItem key={index} value={option}>
                                      {option}
                                    </MenuItem>
                                  ))}
                                </Select>
                              </FormControl>
                            </div>
                          </div>
                        </div>
                      <div className="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                        <button
                          type="button"
                          className="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:col-start-1 sm:mt-0"
                          onClick={handleClose}
                        >
                          Cancel
                        </button>
                        <button
                          type="submit"
                          className="inline-flex w-full justify-center rounded-md bg-green-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-600 sm:col-start-2"
                        >
                          {editing ? 'Update' : 'Save'}
                        </button>
                      </div>
                    </div>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </Dialog>
    </div>
)};

export default MembersPage;